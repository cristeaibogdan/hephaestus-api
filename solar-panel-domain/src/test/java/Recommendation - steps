Create a method that returns a recommendation based on the properties of the Damage class:

NONE => if all booleans are false and details are ""
REPAIR => one or two booleans are true
RECYCLE => three booleans are true
DISPOSE => all booleans are true

A. Setup
    1. Copy-paste recommendation enum from washing-machine-app module
    2. Leave only the following values = NONE, REPAIR, RECYCLE, DISPOSE

B. Tests
    1. Create DamageTest class in solar-panel-domain module
    2. Create method should_ReturnNone_When_NoDamage()
    3. In GIVEN instantiate Damage with all args constructor and set false and empty string for properties
    4. In WHEN part write damage.calculate();
    5. TEST FAILS as the method does not exist;
    6. ALT + ENTER to create the method.
    7. TEST PASSES

    8. Store the method's return in a Recommendation => Recommendation actual = damage.calculate();
    9. TEST FAILS as the method currently returns void
    10. ALT + ENTER to change the return type
    11. TEST PASSES

    13. In THEN write assertThat(actual).isEqualTo(Recommendation.NONE);
    14. TEST FAILS as the method returns null
    15. In Damage.calculate() change the return type from null to Recommendation.NONE
    16. TEST PASSES

    17. Copy paste previous test and rename to should_ReturnRepair_When_OneDamageFlagsIsTrue
    18. In GIVEN set hotSpots to true
    19. In THEN change the equal part to Recommendation.REPAIR
    20. TEST FAILS, as the damage.calculate() method always returns Recommendation.NONE
    21. In calculate() count the booleans, and if the total number of true is 1 return Recommendation.REPAIR
    22. TEST PASSES

    23. Copy paste previous test and rename to should_ReturnRepair_When_TwoDamageFlagsAreTrue
    24. In GIVEN set hotSpots and microCracks to true
    25. TEST FAILS, as recommendation is NONE
    26. Add another if statement where count == 2 returns REPAIR
    27. TEST PASSES

    28. Copy paste previous test and rename to should_ReturnRecycle_When_ThreeDamageFlagsAreTrue
    29. In GIVEN set hotSpots, microCracks and snailTrails to true
    30. In THEN change Recommendation to RECYCLE
    31. TEST FAILS, as the returned recommendation is NONE
    32. Open Damage.calculate() and add another if == 3 and return RECYCLE
    33. TEST PASSES

    34. Copy paste previous test and rename to should_ReturnDispose_When_AllDamageFlagsAreTrue
    35. In GIVEN set all booleans to true
    36. In THEN change Recommendation to DISPOSE
    37. TEST FAILS, as the returned recommendation is NONE
    38. Open Damage.calculate() and add another if == 4 and return DISPOSE
    39. TEST PASSES

C. Refactor logic
    1. In Damage.calculate() extract all the ifs and the recommendation into a switch method
    2. The following method is the result:
        	private Recommendation getRecommendation(int count) {
        		return switch (count) {
        			case 1, 2 -> Recommendation.REPAIR;
        			case 3 -> Recommendation.RECYCLE;
        			case 4 -> Recommendation.DISPOSE;
        			default -> Recommendation.NONE;
        		};
        	}
    3. ALL TEST PASS

    4. Extract all the if's to a separate method that counts the booleans:
        	private int countFlags(){
        		int result = 0;
        		if (this.hotSpots) { result++; }
        		if (this.microCracks) { result++; }
        		if (this.snailTrails) { result++; }
        		if (this.brokenGlass) { result++; }
        		return result;
        	}
    5. ALL TEST PASS

D. Business rule changed:
    There should be no NONE recommendation, an exception should be thrown.
    1. Rename test should_ReturnNone_When_NoDamage to should_ThrowException_When_NoDamage
    2. Delete WHEN and THEN
    3. In THEN write:
        assertThatThrownBy(() -> damage.calculate())
        				.isInstanceOf(CustomException.class);
    4. TEST FAILS, as nothing is thrown, the code return Recommendation.NONE

    5. In Damage.getRecommendation replace default case with:
        default -> throw new CustomException("Invalid recommendation issued", ErrorCode.GENERAL);
    6. ALL TESTS PASS
    7. Remove NONE from the recommendation enum

E. Create another field in SolarPanel called Recommendation which will be assigned based on Damage.calculate()

    1. Create SolarPanelTest class
    2. Create test should_ReturnRecommendationRepair_When_OneDamageFlagIsTrue
    3. Create an instance of SolarPanel in GIVEN with one boolean from Damage set to true
    4. In WHEN type solarPanel.getRecommendation()
    5. TEST FAILS as no method exists

    6. Create property recommendation on SolarPanel:
        	@Setter(NONE)
        	@Column(name = "recommendation")
        	private Recommendation recommendation;
    7. TEST PASSES

    8. Extract getRecommendation into a local variable called actual
    9. In THEN part write: assertThat(actual).isEqualTo(Recommendation.REPAIR);
    10. TEST FAILS as it returns null

    11. In SolarPanel constructor add: this.recommendation = this.damage.calculate();
    12. TEST PASSES

    13. Copy previous test and rename to should_ReturnRecommendationDispose_When_AllDamageFlagsAreTrue
    14. Change THEN to Recommendation.DISPOSE
    15. TEST PASSES

    16. Copy previous test and rename to should_ReturnRecommendationRecycle_When_DamageIsModifiedWithSetter
    17. In GIVEN leave only one flag to true
    18. In WHEN write:
		solarPanel.setDamage(new Damage(
				true,
				true,
				true,
				false,
				""
		));
    19. TEST FAILS, as no setDamage exists
    20. ALT + ENTER to create the method in SolarPanel. Also add @Setter(NONE) on Damage
    21. In THEN change Recommendation.RECYCLE
    22. TEST FAILS, as the setter method doesn't do anything.
    23. In SolarPanel modify the set to create a defensive copy first:
        public void setDamage(Damage damage) {
            this.damage = new Damage(damage);
        }
    24. In SolarPanel modify the set to also update the recommendation field:
        	public void setDamage(Damage damage) {
        		this.damage = new Damage(damage);
        		this.recommendation = this.damage.calculate();
        	}
    25. ALL UNIT TESTS PASS

    26. However, since we introduced a Exception in Damage, all our integration tests now fail.
    In order to fix, we need to go to TestData and change to true one boolean flag,
    and also rename the method to createValidSaveSolarPanelRequest
    27. ALL TESTS PASS

