Goal:
 Create endpoint that takes in a String qrCode and returns a
    GetProductIdentificationResponse(
        String manufacturer,
        String model,
        String type
    )

 Other considerations:
   a. A new property is needed on the entity, qrCode
   b. A new column is needed in the DB qr_code
   c. The new DB column needs to have a unique code => hephaestus-washing-machine-001 (project-module-number)
   d. Flyway needs to do the above changes for DB

*** A. Social Unit Test *** => Created logic in controller/service/repository
1. Create ProductControllerTest class
2. Instantiate ProductController
3. Instantiate ProductService
4. Mock ProductRepository

5. Write dummy test assertThat(false).isTrue;
6. Run test
7. Test fails

8. Rename test to should_ReturnGetProductIdentification_When_ProvidedQrCode
9. Create GIVEN, WHEN, THEN part
10. In WHEN write underTest.getProductIdentification();
11. ALT + ENTER to create the method in ProductController
12. Test is green

13. In WHEN store write GetProductIdentificationResponse actual = underTest.getProductIdentification();
14. ALT + ENTER to create a record under dto package
15. ALT + ENTER to change the return type of the method to GetProductIdentificationResponse
16. Test is green

17. In GIVEN write GetProductIdentification expected = new GetProductIdentificationResponse(
                            "WhirlPool",
                            "Model100",
                            "Type100");
18. ALT + ENTER to change the signature of the record
19. Rename the properties manufacturer, model, type
20. Test is green

21. In GIVEN part write String qrCode = "hephaestus-washing-machine-001";
22. Pass the qrCode to underTest.getProductIdentification(qrCode);
23. ALT + ENTER to add the parameter to the method
24. Test is green

25. In the GIVEN part write given(productRepositoryMock.findByQrCode(qrCode)).willReturn(expected);
25. ALT + ENTER to create GetProductIdentificationResponse findByQrCode(String qrCode); in ProductRepository
26. Test is green

27. In THEN write assertThat(actual).usingRecursiveComparison().isEqualTo(expected);
28. Test fails as null is returned
29. In getProductIdentification write return new GetProductIdentificationResponse("WhirlPool", "Model100", "Type100");
30. Test is green

31. In THEN part write verify(productRepositoryMock).findByQrCode(qrCode);
32. Test fails
33. In ProductController overwrite the return with productService.getProductIdentification(qrCode);
34. ALT + ENTER to create the method in ProductService
35. Test fails because productRepository is not invoked
36. In ProductService write return productRepository.findByQrCode(qrCode);
37. Test is green

*** B. MockMVC Test *** => Added endpoint annotations, added Error code QR_CODE_NOT_FOUND and message in message.properties
Phase 1 - ReturnStatusOk
1. Create ProductControllerMvcTest class
2. Add @WebMvcTest(ProductController.class)
3. Add 	@Autowired MockMvc mockMvc;
       	@Autowired ObjectMapper jackson;
4. Add @MockBean ProductService productService;
5. Write dummy test assertThat(true).isTrue();
6. Test is green

7. Rename test to should_ReturnStatusOk_When_ProvidedQrCode
8. Add GIVEN, WHEN, THEN part
9. In GIVEN write String qrCode = "hephaestus-washing-machine-001";
10. In WHEN write ResultActions resultActions = mockMvc.perform(
                  				get("/api/v1/products/{qrCode}", qrCode));
11. Test is green

12. In THEN write resultActions.andExpect(status().isOk());
13. Test fails, throws 404 as the endpoints is now annotated with @GetMapping
14. In ProductController for getProductIdentification write @GetMapping("/{qrCode}") and add @PathVariable to the parameter
15. Test is green

16. In GIVEN part write GetProductIdentificationResponse expected = new GetProductIdentificationResponse(
                        	"Bosch",
                        	"model100",
                        	"Type192");
17. In THEN part add .andExpect(content().string(jackson.writeValueAsString(expected)));
18. Test fails, as no content is sent back
19. In GIVEN write given(productRepository.findByQrCode(qrCode)).willReturn(expected);
20. Test is green

Phase 2 - ReturnStatusNotFound and user message
1. Copy-paste previous test
2. Rename to should_ReturnStatusNotFound_When_QrCodeNotFound
3. Delete expected and THEN part
4. In given add: given(productService.getProductIdentification(qrCode))
                 				.willThrow(new CustomException(ErrorCode.QR_CODE_NOT_FOUND));
5. Test fails, no ErrorCode.QR_CODE_NOT_FOUND exists
6. ALT + ENTER to create QR_CODE_NOT_FOUND in ErrorCode
7. Test is green

8. In THEN part add resultActions.andExpect(status().isNotFound());
9. Test fails because by default it sends a 500
10. Modify QR_CODE_NOT_FOUND (HttpStatus.NOT_FOUND); to include the statusCode
11. Test is green

12. In THEN add .andExpect(content().string(not(containsString("Internal Translation Error"))));
13. Test fails
14. Open message.properties and add QR_CODE_NOT_FOUND = No product was found for the given qr code
15. Translate the message to all the other locales
16. All tests are green