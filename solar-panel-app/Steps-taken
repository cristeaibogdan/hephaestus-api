******************************************************************
*** A. Setup
******************************************************************
    1. Added BaseIntegrationTest
    2. Added mapper package with an empty class
    3. Moved dto to dto package
    4. Added spring-boot-starter-data-jpa to solar-panel-domain pom.xml
    5. Added dummyTest in SaveIntegrationTest to make sure everything runs
    6. Test FAILS

    7. Added postgresql driver to solar-panel-domain pom.xml
    8. Test PASSES.

******************************************************************
*** B. SaveIntegrationTest
******************************************************************

    0. Created the DTOs SaveSolarPanelRequest and SaveSolarPanelDamageRequest. The frontend part provides these.
    1. Renamed dummyTest to should_saveRequest_With_AllPropertiesInDB
    2. In the GIVEN part create a SaveSolarPanelRequest
    3. In the WHEN part write: underTest.save(request);
    4. Test FAILS, as underTest does not exist.

    5. Add @Autowired SolarPanelApplicationService underTest; to the test class
    6. Test FAILS, as save method does not exist.

    7. ALT+ENTER to create the method together with the input parameter.
    8. TEST PASSES.

    9. In WHEN part write: repository.findBySerialNumber("AX-098-200").orElseThrow();
    10. TEST FAILS, as no repository exists in the test class

    11. Add @Autowired SolarPanelRepository repository; to the test class
    12. TEST FAILS, as no .findBySerialNumber method exists

    13. ALT+ENTER to create the method together with the input parameter.
    14. Create the SolarPanel class and annotate it with @Entity and @Table(schema = "public", name = "solar_panel")
    15. Copy-paste the BaseEntity from the other module
    16. Extend SolarPanel with BaseEntity
    17. Import SolarPanel in the SolarPanelRepository
    18. TEST FAILS, as it doesn't extend any repository

    19. Modify interface SolarPanelRepository extends JpaRepository<SolarPanel, Long>
    20. TEST FAILS, as no property serialNumber exists in SolarPanel entity

    21. Add the following property in SolarPanel: @Column(name = "serial_number")
                                                String serialNumber;
    22. TEST FAILS, as no public.solar_panel relation exists

    23. Add the following to application.properties:
        spring.datasource.url=jdbc:postgresql://localhost:5432/solar_panel_db
        spring.datasource.username=postgres
        spring.datasource.password=postgres
        spring.jpa.hibernate.ddl-auto=create-drop
        spring.jpa.show-sql=true
        spring.jpa.properties.hibernate.format_sql=true
    *** Notice that the jpa.hibernate is set to create-drop ***
    24. TEST FAILS, as nothing was saved in the database.

    25. In SolarPanelApplicationService class, in the save method, add repository.save()
    26. The save method requires a SolarPanel entity, create a constructor for SolarPanel, and set the implicit one to protected
    27. In SolarPanelApplicationService class, before save, do a manual map:
            public void save(SaveSolarPanelRequest saveSolarPanelRequest) {
                SolarPanel solarPanel = new SolarPanel(
                        saveSolarPanelRequest.serialNumber()
                );
                repository.save(solarPanel);
            }
    28. TEST PASSES

    29. In THEN part store store the response from the repository in SolarPanel actual
    30. Write assertThat(actual).satisfies(act -> {
              			// main fields
              			assertThat(act.getSerialNumber()).isEqualTo(request.serialNumber());
              		});
    31. TEST FAILS as getSerialNumber() doesn't exist

    32. Add @Getter to SolarPanel class
    33. TEST PASSES

    34. In SolarPanel entity add all the other properties, except for SaveSolarPanelDamageRequest
    35. Update the SolarPanel constructor
    35. Update the constructor in SolarPanelApplicationService
    36. Write assertions for the added properties in the test
    37. TEST PASSES

    38. Create entity Damage with all the properties from the DTO
    39. Add Damage property to SolarPanel
    40. Add assertions for all the properties of Damage in the test method
    41. TEST PASSES

==== Add test to check if createdAt works as expected ====

    1. Copy paste previous test and rename to should_ReturnCurrentDate_For_createdAtField
    2. Delete the THEN part
    3. Add @Setter(NONE)
           	@CreationTimestamp
           	@Column(name = "created_at")
           	private LocalDateTime createdAt; to Solar Panel
    4. Add assertThat(actual.getCreatedAt().toLocalDate())
          				.isEqualTo(LocalDate.now()); in the THEN part
    5. TEST PASSES
    6. Group the 2 tests into a @Nested IntegrationTest inner class

==== Add mvc tests ====

    1. Add nested class MvcTest
    2. Inside, write the following test - should_ReturnStatusCreated_When_DTOSaved
    3. Create a SaveSolarPanelRequest in the GIVEN part
    4. Add @Autowired MockMvc mockMvc; and @Autowired ObjectMapper jackson;
    5. In WHEN part add mockMvc.perform(
                                post("/v1/solar-panels/save")
                                        .content(jackson.writeValueAsString(request))
                                );
    6. TEST PASSES

    7. Introduce local variable for mockMvc.perform
    8. In THEN add resultActions.andExpect(status().isCreated());
    9. TEST FAILS as the endpoint is not found.

    10. Open SolarPanelApplicationService, right click, refactor, extract interface and select the save method. Name it ISolarPanelApplicationService
    11. Open ISolarPanelApplicationService and add @RequestMapping("/v1/solar-panels")
    12. In ISolarPanelApplicationService add @RequestBody to the endpoint: void save(@RequestBody SaveSolarPanelRequest request);
    13. In ISolarPanelApplicationService add @PostMapping("/save") to the save method
    14. In SolarPanelApplicationService add @RestController
    15. TEST FAILS as Content-Type 'application/octet-stream' is not supported

    16. In the WHEN part add contentType
    			ResultActions resultActions = mockMvc.perform(
    					post("/v1/solar-panels/save")
    							.content(jackson.writeValueAsString(request))
    							.contentType(MediaType.APPLICATION_JSON)
    			);
    17. TEST FAILS as the response was 200 (default), instead of 201

    18. In ISolarPanelApplicationService add @ResponseStatus(HttpStatus.CREATED) to the save method
    19. TEST PASSES